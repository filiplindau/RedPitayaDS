#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        RedPitayaEventsDS.py
#
# description : Python source for the RedPitayaEventsDS and its commands.
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                RedPitayaEventsDS are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import redpitaya_control as rpc
import threading
import time
import numpy as np
from socket import gethostname
import Queue


class DeviceCommand:
    def __init__(self, command, data=None):
        self.command = command
        self.data = data


#==================================================================
#   RedPitayaEventsDS Class Description:
#
#         Control of a RedPitaya oscilloscope.
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :    Oscilloscope running, aquiring traces
#   DevState.INIT :  Oscilloscope initializing
#==================================================================


class RedPitayaEventsDS(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        RedPitayaEventsDS.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        self.info_stream(''.join(("[Device delete_device method] for device", self.get_name())))
        self.stopStateThread()
        self.oscilloscope.close()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.info_stream(''.join(("In ", self.get_name(), "::init_device()")))
        self.set_state(PyTango.DevState.UNKNOWN)
        self.get_device_properties(self.get_device_class())

        try:
            self.stopStateThread()
            self.oscilloscope.close()
        except Exception, e:
            pass

        self.oscilloscope = None

        try:
            self.measurementStrings
        except:
            self.measurementStrings = ['max(w1)', 'max(w2)', 'w1.sum()', 'w2.sum()']
            self.measurementData = np.array([0.0, 0.0, 0.0, 0.0])
            self.redPitayaData = rpc.RedPitayaData()
            
        # Setup event handling
        self.set_change_event('state', True, False)
        self.set_change_event('recordlength', True, False)
        self.set_change_event('triggerwait', True, False)
        self.set_change_event('triggerdelay', True, False)
        self.set_change_event('triggerlevel', True, False)
        self.set_change_event('triggermode', True, False)
        self.set_change_event('triggersource', True, False)
        self.set_change_event('samplerate', True, False)
        self.set_change_event('waveform1', True, False)
        self.set_change_event('waveform2', True, False)
        self.set_change_event('measurementdata1', True, False)
        self.set_change_event('measurementdata2', True, False)
        self.set_change_event('measurementdata3', True, False)
        self.set_change_event('measurementdata4', True, False)
            
        self.stateThread = threading.Thread()
        threading.Thread.__init__(self.stateThread, target=self.stateHandlerDispatcher)

        self.commandQueue = Queue.Queue(100)

        self.stateHandlerDict = {PyTango.DevState.ON: self.onHandler,
                                PyTango.DevState.STANDBY: self.standbyHandler,
                                PyTango.DevState.ALARM: self.onHandler,
                                PyTango.DevState.FAULT: self.faultHandler,
                                PyTango.DevState.INIT: self.initHandler,
                                PyTango.DevState.UNKNOWN: self.unknownHandler,
                                PyTango.DevState.OFF: self.offHandler}

        self.stopStateThreadFlag = False

        self.stateThread.start()


#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        self.info_stream(''.join(("In ", self.get_name(), "::always_excuted_hook()")))


    def stateHandlerDispatcher(self):
        prevState = self.get_state()
        while self.stopStateThreadFlag == False:
            try:
                state = self.get_state()
                self.stateHandlerDict[state](prevState)
                prevState = state
                self.push_change_event('state', True)
            except KeyError:
                self.stateHandlerDict[PyTango.DevState.UNKNOWN](prevState)
                prevState = state


    def unknownHandler(self, prevState):
        self.info_stream('Entering unknownHandler')
        connectionTimeout = 1.0

        self.stopWatchdog()

        self.oscilloscopeData = None
        try:
            self.oscilloscope = rpc.RedPitaya_control(self.IPaddress, self.Port)
            self.set_state(PyTango.DevState.INIT)
            self.info_stream('... connected')
        except Exception, e:
            self.error_stream(''.join(('Could not create oscilloscope object.', str(e))))
            self.set_state(PyTango.DevState.UNKNOWN)
            self.set_status(''.join(('Could not create oscilloscope object.', str(e))))


        while self.get_state() == PyTango.DevState.UNKNOWN:
            self.info_stream('Trying to connect...')
            try:
                self.oscilloscope.close()
            except:
                pass
            try:
                self.oscilloscope = rpc.RedPitaya_control(self.IPaddress, self.Port)
                self.set_state(PyTango.DevState.INIT)
                self.info_stream('... connected')
            except Exception, e:
                self.error_stream(''.join(('Could not create oscilloscope object.', str(e))))
                self.set_state(PyTango.DevState.UNKNOWN)
                self.set_status(''.join(('Could not create oscilloscope object.', str(e))))

            time.sleep(connectionTimeout)

    def initHandler(self, prevState):
        self.info_stream('Entering initHandler')
        self.set_state(PyTango.DevState.INIT)
        s_status = 'Starting initialization\n'
        self.set_status(s_status)
        self.info_stream(s_status)
        initTimeout = 1.0  # Retry time interval

        exitInitFlag = False  # Flag to see if we can leave the loop


        while exitInitFlag == False:
            exitInitFlag = True  # Preset in case nothing goes wrong

            try:
                s = 'Initializing scope settings\n'
                s_status = ''.join((s_status, s))
                self.set_status(s_status)
                self.info_stream(s)
                self.oscilloscope.initScope()
            except Exception, e:
                self.error_stream('Could not initialize scope')
                exitInitFlag = False
                time.sleep(initTimeout)
                continue

            s = 'Setting trigger level\n'
            s_status = ''.join((s_status, s))
            self.set_status(s_status)
            self.info_stream(s)
            attrs = self.get_device_attr()

            attrNbr = attrs.get_attr_nb()
            self.info_stream(''.join(('Found ', str(attrNbr), ' attributes.')))
            attrList = attrs.get_attribute_list()
            self.info_stream(str(type(attrList)))
            for k in range(attrNbr):
                attr = attrs.get_attr_by_ind(k)
                self.info_stream(attr.get_name())
                self.info_stream(''.join(('Associated write: ', attr.get_assoc_name())))
                self.info_stream(''.join(('Associated index: ', str(attr.get_assoc_ind()))))
                if attr.get_assoc_name() != 'None':
                    wAttr = attrs.get_w_attr_by_ind(attr.get_assoc_ind())
                    self.info_stream(''.join((wAttr.get_name())))
#                     w = wAttr.get_write_value()
#                     self.info_stream(''.join((wAttr.get_name(),': ', str(w))))


#             apa = attrs.get_w_attr_by_name('triggermode')
#             try:
#                 print 'triggermode wAttr:', repr(apa.get_write_value(extract_as=PyTango.ExtractAs.Numpy))
#                 print type(apa.get_write_value())
#                 print 'Length: ', len(apa.get_write_value())
#                 print apa.get_write_value_length()
#             except Exception, e:
#                 self.error_stream(str(e))
#
#             try:
#
#                 self.redPitayaData.triggerLevel = attrs.get_w_attr_by_name('TriggerLevel').get_write_value()
#                 s = ''.join(('Trigger level ', str(self.redPitayaData.triggerLevel), ' V'))
#                 self.info_stream(s)
#             except Exception, e:
#                 self.error_stream('Could not retrieve attribute Trigger level, using default value')
#             try:
#                 self.oscilloscope.setTriggerLevel(self.redPitayaData.triggerLevel)
#             except Exception, e:
#                 exitInitFlag = False
#                 self.set_status(''.join(('Could not set trigger level', str(e))))
#                 self.error_stream(''.join(('Could not set trigger level', str(e))))
#                 continue
#
#             s = 'Setting trigger source\n'
#             s_status = ''.join((s_status, s))
#             self.set_status(s_status)
#             self.info_stream(s)
# #            try:
# #                self.redPitayaData.triggerSource = attrs.get_w_attr_by_name('triggerSource').get_write_value()
# #                s = ''.join(('trigger source ', str(self.redPitayaData.triggerSource), ' '))
# #                self.info_stream(s)
# #                if self.redPitayaData.triggerSource.lower() not in ['channel1', 'channel2', 'external']:
# #                    self.redPitayaData.triggerSource = 'channel1'
# #            except Exception, e:
# #                self.error_stream('Could not retrieve attribute trigger source, using default value')
#             self.info_stream('Retrieved trigger source')
#             try:
#                 self.oscilloscope.setTriggerSource(self.redPitayaData.triggerSource)
#             except Exception, e:
#                 exitInitFlag = False
#                 self.set_status(''.join(('Could not set trigger source', str(e))))
#                 self.error_stream(''.join(('Could not set trigger source', str(e))))
#                 continue
#
#             s = 'Setting trigger mode\n'
#             s_status = ''.join((s_status, s))
#             self.set_status(s_status)
#             self.info_stream(s)
#             try:
#                 self.redPitayaData.triggerMode = attrs.get_w_attr_by_name('triggerMode').get_write_value()
#                 s = ''.join(('trigger mode ', str(self.redPitayaData.triggerMode), ' '))
#                 self.info_stream(s)
#                 if self.redPitayaData.triggerMode.lower() not in ['normal', 'auto', 'single']:
#                     self.redPitayaData.triggerMode = 'auto'
#             except Exception, e:
#                 self.error_stream('Could not retrieve attribute trigger mode, using default value')
#             try:
#                 self.oscilloscope.setTriggerMode(self.redPitayaData.triggerMode)
#             except Exception, e:
#                 exitInitFlag = False
#                 self.set_status(''.join(('Could not set trigger mode', str(e))))
#                 self.error_stream(''.join(('Could not set trigger mode', str(e))))
#                 continue
#
#             s = 'Setting trigger delay\n'
#             s_status = ''.join((s_status, s))
#             self.set_status(s_status)
#             self.info_stream(s)
#             try:
#                 self.redPitayaData.triggerDelay = attrs.get_w_attr_by_name('triggerDelay').get_write_value()
#                 s = ''.join(('trigger delay ', str(self.redPitayaData.triggerDelay), ' s'))
#                 self.info_stream(s)
#             except Exception, e:
#                 self.error_stream('Could not retrieve attribute trigger delay, using default value')
#             try:
#                 self.oscilloscope.setTriggerDelay(self.redPitayaData.triggerDelay)
#             except Exception, e:
#                 exitInitFlag = False
#                 self.set_status(''.join(('Could not set trigger delay', str(e))))
#                 self.error_stream(''.join(('Could not set trigger delay', str(e))))
#                 continue
#
#             s = 'Setting record length\n'
#             s_status = ''.join((s_status, s))
#             self.set_status(s_status)
#             self.info_stream(s)
#             try:
#                 self.redPitayaData.recordLength = attrs.get_w_attr_by_name('recordLength').get_write_value()
#                 s = ''.join(('record length ', str(self.redPitayaData.recordLength), ' '))
#                 self.info_stream(s)
#             except Exception, e:
#                 self.error_stream('Could not retrieve attribute record length, using default value')
#             try:
#                 self.oscilloscope.setRecordLength(self.redPitayaData.recordLength)
#             except Exception, e:
#                 exitInitFlag = False
#                 self.set_status(''.join(('Could not set record length', str(e))))
#                 self.error_stream(''.join(('Could not set record length', str(e))))
#                 continue
#
#             s = 'Setting samplerate\n'
#             s_status = ''.join((s_status, s))
#             self.set_status(s_status)
#             self.info_stream(s)
#             try:
#                 sampleRate = attrs.get_w_attr_by_name('SampleRate').get_write_value()
#                 s = ''.join(('Samplerate ', str(sampleRate), ' Sps'))
#                 self.info_stream(s)
#             except Exception, e:
#                 self.error_stream('Could not retrieve attribute samplerate, using default value')
#             try:
#                 decArray = np.array([1, 8, 64, 1024, 8192, 16384])
#                 sampleRateArray = 125e6 / decArray
#                 sampleIndex = max(0, np.argmin(sampleRateArray > sampleRate) - 1)
#                 self.oscilloscope.setDecimationFactor(sampleIndex)
#             except Exception, e:
#                 exitInitFlag = False
#                 self.set_status(''.join(('Could not set samplerate', str(e))))
#                 self.error_stream(''.join(('Could not set samplerate', str(e))))
#                 continue



            self.set_status('Connected to oscilloscope, not acquiring')
            self.info_stream('Initialization finished.')
            self.set_state(PyTango.DevState.ON)

            # Start watchdog
            self.resetWatchdog()

    def standbyHandler(self, prevState):
        self.info_stream('Entering standbyHandler')
        self.set_status('Connected to oscilloscope, not acquiring spectra')
        keepAliveInterval = 0.5
        t0 = time.time()

        while self.stopStateThreadFlag == False:
            if self.get_state() != PyTango.DevState.STANDBY:
                break
            # Check if any new commands arrived:
            self.checkCommands()

            # Try contacting the redpitaya at regular intervals to make sure it is alive
            t = time.time()
            if t-t0 > keepAliveInterval:
                t0 = t
                try:
                    self.oscilloscope.setTriggerLevel(self.oscilloscope.redPitayaData.triggerLevel)
                    self.resetWatchdog()
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('standbyHandler error: ', str(e))))

            if self.get_state() != PyTango.DevState.STANDBY:
                break

            # 50 ms sleep to stay responsive and still not bog down the computer
            time.sleep(0.05)

    def onHandler(self, prevState):
        self.info_stream('Entering onHandler')
        self.set_status('Connected to oscilloscope, acquiring waveforms')
        handledStates = [PyTango.DevState.ON, PyTango.DevState.ALARM]
        self.openOscilloscope()

        self.sleepTime = 0.01
        s = ''.join(('Sleeptime: ', str(self.sleepTime)))
        self.info_stream(s)
        newWaveformTimestamp = time.time()
        oldWaveformTimestamp = time.time()
        nextUpdateTime = time.time()
        while self.stopStateThreadFlag == False:
            if self.get_state() not in handledStates:
                self.info_stream(''.join(('State ', str(self.get_state()), ' not in handled states')))
                break

            # Check if any new commands arrived:
            self.debug_stream('Entering check commands...')
            self.checkCommands()
            self.debug_stream('...check commands done')

            # Check if we should break this loop and go to a new state handler:
            if self.get_state() not in handledStates:
                self.info_stream(''.join(('2.. State ', str(self.get_state()), ' not in handled states')))
                break

            try:
                ts = time.time()
                if ts > nextUpdateTime:
                    self.debug_stream('Acquiring waveform...')
                    # Update waveforms
                    try:
                        triggerStatus = False
                        triggerStatus = self.oscilloscope.updateWaveforms()
                        self.resetWatchdog()
                    except Exception, e:
                        self.error_stream(str(e))
                    self.debug_stream('Acquiring waveform done.')
                    newWaveformTimestamp = time.time()
                    # Check if we got a fresh trigg event:
                    if triggerStatus == False:
                        # No, so check if the delay is long (>0.3 s), the flag it as waiting for trigger
                        if newWaveformTimestamp - oldWaveformTimestamp > 0.3:
                            self.redPitayaData.triggerWait = True
                            self.push_change_event('triggerwait', True)
                    else:
                        # Yes, so flag it as not waiting for trigger and update timestamp
                        self.redPitayaData.triggerWait = False
                        oldWaveformTimestamp = newWaveformTimestamp
                        

                        # Calculate measurements
                        self.debug_stream('Getting waveforms.')
                        w1 = self.oscilloscope.getWaveform(1)
                        self.redPitayaData.waveform1 = w1
                        w2 = self.oscilloscope.getWaveform(2)
                        self.redPitayaData.waveform2 = w2
                        t = self.oscilloscope.redPitayaData.timevector
                        self.redPitayaData.timevector = t
                        self.debug_stream('Waveforms gotten.')
                        
                        self.push_change_event('waveform1', w1)
                        self.push_change_event('waveform2', w2)

                        for i, s in enumerate(self.measurementStrings):
                            try:
                                self.measurementData[i] = eval(s)
                                self.push_change_event(''.join(('measurementdata', str(i))), self.measurementData[i])
                            except Exception, e:
                                self.measurementData[i] = None
                        self.debug_stream('Measurements calculated.')

                time.sleep(self.sleepTime)

            except Exception, e:
                self.set_state(PyTango.DevState.FAULT)
                self.set_status('Error reading hardware.')
                self.error_stream(''.join(('onHandler error: ', str(e))))


    def alarmHandler(self, prevState):
        pass


    def faultHandler(self, prevState):
        responseAttempts = 0
        maxAttempts = 5
        responseTimeout = 0.5
        self.info_stream('Entering faultHandler.')
        self.set_status('Fault condition detected')

        while self.get_state() == PyTango.DevState.FAULT:
            try:
                self.oscilloscope.close()
                time.sleep(1.5)
                self.oscilloscope.connect(self.IPaddress, self.Port)

                self.set_state(prevState)
                self.info_stream('Fault condition cleared.')
                break
            except Exception, e:
                self.error_stream(''.join(('In faultHandler: Testing controller response. Returned ', str(e))))
                responseAttempts += 1
            if responseAttempts >= maxAttempts:
                self.set_state(PyTango.DevState.UNKNOWN)
                self.set_status('Could not connect to controller')
                self.error_stream('Giving up fault handling. Going to UNKNOWN state.')
                break
            time.sleep(responseTimeout)


    def offHandler(self, prevState):
        self.info_stream('Entering offHandler')
        try:
            self.oscilloscope.close()
        except Exception, e:
            self.error_stream(''.join(('Could not disconnect from oscilloscope, ', str(e))))

        self.set_status('Disconnected from oscilloscope')
        while self.stopStateThreadFlag == False:
            if self.get_state() != PyTango.DevState.OFF:
                break
            # Check if any new commands arrived:
            self.checkCommands()
            if self.get_state() != PyTango.DevState.OFF:
                break

            time.sleep(0.1)

    def checkCommands(self):
        try:
            cmd = self.commandQueue.get(block=False)
            self.info_stream(str(cmd.command))
            if cmd.command == 'writeTriggerSource':
                try:
                    self.oscilloscope.setTriggerSource(cmd.data)
                    self.push_change_event('triggersource', self.oscilloscope.getTriggerSource())
                except ValueError, e:
                    self.error_stream(''.join(('ValueError: ', str(e))))
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(e))))
            elif cmd.command == 'writeTriggerMode':
                try:
                    self.oscilloscope.setTriggerMode(cmd.data)
                    self.push_change_event('triggermode', self.oscilloscope.getTriggerMode())
                except ValueError, e:
                    self.error_stream(''.join(('ValueError: ', str(e))))
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(e))))
            elif cmd.command == 'writeRecordLength':
                try:
                    self.oscilloscope.setRecordLength(cmd.data)
                    self.push_change_event('recordlength', self.oscilloscope.getRecordLength())
                except ValueError, e:
                    self.error_stream(''.join(('ValueError: ', str(e))))
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(e))))
            elif cmd.command == 'writeDecimationFactor':
                try:
                    self.oscilloscope.setDecimationFactor(cmd.data)
                    self.push_change_event('samplerate', self.oscilloscope.getSampleRate())
                except ValueError, e:
                    self.error_stream(''.join(('ValueError: ', str(e))))
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(e))))
            elif cmd.command == 'writeSampleRate':
                decArray = np.array([1, 8, 64, 1024, 8192, 16384])
                sampleRateArray = 125e6 / decArray
                sampleIndex = max(0, np.argmin(sampleRateArray > cmd.data) - 1)
                self.info_stream('writeSampleRate:')
                self.info_stream(''.join(('sampleIndex: ', str(sampleIndex))))
                try:
                    self.oscilloscope.setDecimationFactor(sampleIndex)
                    self.push_change_event('samplerate', self.oscilloscope.getSampleRate())
                except ValueError, e:
                    self.error_stream(''.join(('ValueError: ', str(e))))
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(e))))
            elif cmd.command == 'writeTriggerLevel':
                try:
                    self.oscilloscope.setTriggerLevel(cmd.data)
                    self.push_change_event('triggerlevel', self.oscilloscope.getTriggerLevel())
                except ValueError, e:
                    self.error_stream(''.join(('ValueError: ', str(e))))
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(e))))
            elif cmd.command == 'writeTriggerDelay':
                try:
                    self.oscilloscope.setTriggerDelay(cmd.data)
                    self.push_change_event('triggerdelay', self.oscilloscope.getTriggerDelay())
                except ValueError, e:
                    self.error_stream(''.join(('ValueError: ', str(e))))
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream(''.join(('Hardware Error: ', str(e))))
            elif cmd.command == 'writeMeasurementString1':
                self.measurementStrings[0] = cmd.data
            elif cmd.command == 'writeMeasurementString2':
                self.measurementStrings[1] = cmd.data
            elif cmd.command == 'writeMeasurementString3':
                self.measurementStrings[2] = cmd.data
            elif cmd.command == 'writeMeasurementString4':
                self.measurementStrings[3] = cmd.data

            elif cmd.command == 'start':

                self.set_state(PyTango.DevState.ON)
#                 self.startHardwareThread()

            elif cmd.command == 'stop':
                self.set_state(PyTango.DevState.STANDBY)

            elif cmd.command == 'off':
                self.set_state(PyTango.DevState.OFF)
            elif cmd.command == 'test':
                attrs = self.get_device_attr()
                apa = attrs.get_w_attr_by_name('triggerlevel')
                print 'test triggermode:', repr(apa.get_write_value())
                print type(apa.get_write_value())
                print apa.get_write_value_length()

        except Queue.Empty:
            pass

    def openOscilloscope(self):
        # If the device was closed, we open it again
        if self.oscilloscope.connected == False:
            self.info_stream('In openOscilloscope: scope was disconnected, attempting connect')
            try:
                self.oscilloscope.connect(self.IPaddress, self.Port)
            except Exception, e:
                self.error_stream(''.join(('Could not open device ', str(self.IPaddress), ', ', str(e))))
                self.set_state(PyTango.DevState.FAULT)
                self.set_status(''.join(('Could not open device ', str(self.IPaddress))))

    def resetWatchdog(self):
        try:
            self.watchdogTimer.cancel()
        except:
            pass
        self.watchdogTimer = threading.Timer(self.WatchdogTimeout, self.watchdogHandler)
        self.watchdogTimer.start()

    def stopWatchdog(self):
        try:
            self.watchdogTimer.cancel()
        except:
            pass

    def watchdogHandler(self):
        self.info_stream('Watchdog timed out. Execute init device.')
        self.init_device()

    def stopStateThread(self):
        self.info_stream('Stopping thread...')
        self.stopStateThreadFlag = True
        if self.stateThread.isAlive() == True:
            self.info_stream('It was alive.')
            self.stateThread.join(3)
        self.info_stream('Now stopped.')
        self.stopStateThreadFlag = False
        self.set_state(PyTango.DevState.UNKNOWN)

#==================================================================
#
#    RedPitayaEventsDS read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, data):
        self.info_stream(''.join(("In ", self.get_name(), "::read_attr_hardware()")))



#------------------------------------------------------------------
#    Read TriggerSource attribute
#------------------------------------------------------------------
    def read_TriggerSource(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerSource()")))

        #    Add your own code here

        attr_TriggerSource_read = self.oscilloscope.getTriggerSource()
        attr.set_value(attr_TriggerSource_read)


#------------------------------------------------------------------
#    Write TriggerSource attribute
#------------------------------------------------------------------
    def write_TriggerSource(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_TriggerSource()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeTriggerSource', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- TriggerSource attribute State Machine -----------------
    def is_TriggerSource_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read TriggerMode attribute
#------------------------------------------------------------------
    def read_TriggerMode(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerMode()")))

        #    Add your own code here

        attr_TriggerMode_read = self.oscilloscope.getTriggerMode()
        attr.set_value(attr_TriggerMode_read)


#------------------------------------------------------------------
#    Write TriggerMode attribute
#------------------------------------------------------------------
    def write_TriggerMode(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_TriggerMode()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeTriggerMode', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- TriggerMode attribute State Machine -----------------
    def is_TriggerMode_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read TriggerLevel attribute
#------------------------------------------------------------------
    def read_TriggerLevel(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerLevel()")))

        #    Add your own code here

        attr_TriggerLevel_read = self.oscilloscope.getTriggerLevel()
        attr.set_value(attr_TriggerLevel_read)


#------------------------------------------------------------------
#    Write TriggerLevel attribute
#------------------------------------------------------------------
    def write_TriggerLevel(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_TriggerLevel()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeTriggerLevel', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- TriggerLevel attribute State Machine -----------------
    def is_TriggerLevel_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read TriggerDelay attribute
#------------------------------------------------------------------
    def read_TriggerDelay(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerDelay()")))

        #    Add your own code here

        attr_TriggerDelay_read = self.oscilloscope.getTriggerDelay()
        attr.set_value(attr_TriggerDelay_read)


#------------------------------------------------------------------
#    Write TriggerDelay attribute
#------------------------------------------------------------------
    def write_TriggerDelay(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_TriggerDelay()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeTriggerDelay', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- TriggerDelay attribute State Machine -----------------
    def is_TriggerDelay_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read TriggerWait attribute
#------------------------------------------------------------------
    def read_TriggerWait(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TriggerWait()")))

        #    Add your own code here

        attr_TriggerWait_read = self.redPitayaData.triggerWait
        attr.set_value(attr_TriggerWait_read)


#---- TriggerWait attribute State Machine -----------------
    def is_TriggerWait_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read RecordLength attribute
#------------------------------------------------------------------
    def read_RecordLength(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_RecordLength()")))

        #    Add your own code here

        attr_RecordLength_read = self.oscilloscope.getRecordLength()
        attr.set_value(attr_RecordLength_read)


#------------------------------------------------------------------
#    Write RecordLength attribute
#------------------------------------------------------------------
    def write_RecordLength(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_RecordLength()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeRecordLength', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- RecordLength attribute State Machine -----------------
    def is_RecordLength_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read SampleRate attribute
#------------------------------------------------------------------
    def read_SampleRate(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_SampleRate()")))

        #    Add your own code here
        df = self.oscilloscope.getDecimationFactor()
        decDict = {0: 1,
                   1: 8,
                   2: 64,
                   3: 1024,
                   4: 8192,
                   5: 16384}
        attr_SampleRate_read = 125e6 / decDict[df]
        attr.set_value(attr_SampleRate_read)


#------------------------------------------------------------------
#    Write SampleRate attribute
#------------------------------------------------------------------
    def write_SampleRate(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_SampleRate()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeSampleRate', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- SampleRate attribute State Machine -----------------
    def is_SampleRate_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read TimeVector attribute
#------------------------------------------------------------------
    def read_TimeVector(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_TimeVector()")))

        #    Add your own code here

        attr_TimeVector_read = self.oscilloscope.getTimevector()
        attr.set_value(attr_TimeVector_read, attr_TimeVector_read.shape[0])

#---- TimeVector attribute State Machine -----------------
    def is_TimeVector_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read Waveform1 attribute
#------------------------------------------------------------------
    def read_Waveform1(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_Waveform1()")))

        #    Add your own code here

        attr_data_read = self.redPitayaData.waveform1
        attr.set_value(attr_data_read, attr_data_read.shape[0])

#---- Waveform1 attribute State Machine -----------------
    def is_Waveform1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read Waveform2 attribute
#------------------------------------------------------------------
    def read_Waveform2(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_Waveform2()")))

        #    Add your own code here

        attr_data_read = self.redPitayaData.waveform2
        attr.set_value(attr_data_read, attr_data_read.shape[0])

#---- Waveform2 attribute State Machine -----------------
    def is_Waveform2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MeasurementString1 attribute
#------------------------------------------------------------------
    def read_MeasurementString1(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementString1()")))

        #    Add your own code here
        attr_MeasurementString1_read = self.measurementStrings[0]
        attr.set_value(attr_MeasurementString1_read)


#------------------------------------------------------------------
#    Write MeasurementString1 attribute
#------------------------------------------------------------------
    def write_MeasurementString1(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_MeasurementString1()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeMeasurementString1', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- MeasurementString1 attribute State Machine -----------------
    def is_MeasurementString1_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MeasurementString2 attribute
#------------------------------------------------------------------
    def read_MeasurementString2(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementString2()")))

        #    Add your own code here
        attr_MeasurementString2_read = self.measurementStrings[1]
        attr.set_value(attr_MeasurementString2_read)


#------------------------------------------------------------------
#    Write MeasurementString2 attribute
#------------------------------------------------------------------
    def write_MeasurementString2(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_MeasurementString2()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeMeasurementString2', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- MeasurementString2 attribute State Machine -----------------
    def is_MeasurementString2_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MeasurementString3 attribute
#------------------------------------------------------------------
    def read_MeasurementString3(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementString3()")))

        #    Add your own code here
        attr_MeasurementString3_read = self.measurementStrings[2]
        attr.set_value(attr_MeasurementString3_read)


#------------------------------------------------------------------
#    Write MeasurementString3 attribute
#------------------------------------------------------------------
    def write_MeasurementString3(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_MeasurementString3()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeMeasurementString3', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- MeasurementString3 attribute State Machine -----------------
    def is_MeasurementString3_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MeasurementString4 attribute
#------------------------------------------------------------------
    def read_MeasurementString4(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementString4()")))

        #    Add your own code here
        attr_MeasurementString4_read = self.measurementStrings[3]
        attr.set_value(attr_MeasurementString4_read)


#------------------------------------------------------------------
#    Write MeasurementString4 attribute
#------------------------------------------------------------------
    def write_MeasurementString4(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::write_MeasurementString4()")))
        data = attr.get_write_value()

        #     Add your own code here
        self.commandQueue.put(DeviceCommand('writeMeasurementString4', data))
        self.info_stream(''.join(("Attribute value = ", str(data))))

        #    Add your own code here

#---- MeasurementString4 attribute State Machine -----------------
    def is_MeasurementString4_allowed(self, req_type):
        if self.get_state() in []:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MeasurementData1 attribute
#------------------------------------------------------------------
    def read_MeasurementData1(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementData1()")))

        #    Add your own code here
        attr_MeasurementData1_read = self.measurementData[0]
        if attr_MeasurementData1_read == None:
            attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
        attr.set_value(attr_MeasurementData1_read)

#---- MeasurementData1 attribute State Machine -----------------
    def is_MeasurementData1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MeasurementData2 attribute
#------------------------------------------------------------------
    def read_MeasurementData2(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementData2()")))

        #    Add your own code here
        attr_MeasurementData2_read = self.measurementData[1]
        attr.set_value(attr_MeasurementData2_read)

#---- MeasurementData2 attribute State Machine -----------------
    def is_MeasurementData2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MeasurementData3 attribute
#------------------------------------------------------------------
    def read_MeasurementData3(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementData3()")))

        #    Add your own code here
        attr_MeasurementData3_read = self.measurementData[2]
        attr.set_value(attr_MeasurementData3_read)

#---- MeasurementData3 attribute State Machine -----------------
    def is_MeasurementData3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MeasurementData4 attribute
#------------------------------------------------------------------
    def read_MeasurementData4(self, attr):
        self.info_stream(''.join(("In ", self.get_name(), "::read_MeasurementData4()")))

        #    Add your own code here
        attr_MeasurementData4_read = self.measurementData[3]
        attr.set_value(attr_MeasurementData4_read)

#---- MeasurementData4 attribute State Machine -----------------
    def is_MeasurementData4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.UNKNOWN]:
            #     End of Generated Code
            #     Re-Start of Generated Code
            return False
        return True


#==================================================================
#
#    RedPitayaEventsDS command methods
#
#==================================================================

#------------------------------------------------------------------
#    Start command:
#
#    Description:
#------------------------------------------------------------------
    def Start(self):
        self.info_stream(''.join(("In ", self.get_name(), "::Start()")))
        #    Add your own code here
        self.commandQueue.put(DeviceCommand('start'))

#------------------------------------------------------------------
#    Stop command:
#
#    Description:
#------------------------------------------------------------------
    def Stop(self):
        self.info_stream(''.join(("In ", self.get_name(), "::Stop()")))
        #    Add your own code here
        self.commandQueue.put(DeviceCommand('stop'))

#------------------------------------------------------------------
#    Test command:
#
#    Description:
#------------------------------------------------------------------
    def Test(self):
        self.info_stream(''.join(("In ", self.get_name(), "::Test()")))
        #    Add your own code here
        self.commandQueue.put(DeviceCommand('test'))

#==================================================================
#
#    RedPitayaEventsDSClass class definition
#
#==================================================================
class RedPitayaEventsDSClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'IPaddress':
            [PyTango.DevString,
            "IP address of the oscilloscope",
            [ '127.0.0.1' ] ],
        'Port':
            [PyTango.DevString,
            "Port of the oscilloscope socket",
            [ 8888 ] ],
        'WatchdogTimeout':
            [PyTango.DevDouble,
            "Timeout for the watchdog resetting the hardware in s",
            [ 2 ] ],

        }


    #    Command definitions
    cmd_list = {
        'Start':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Stop':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Test':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        }


    #    Attribute definitions
    attr_list = {
        'TriggerSource':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Trigger source. One of channel1, channel2, or external",
                'Memorized':"true",
            } ],
        'TriggerMode':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Trigger mode. One of auto, normal, or single",
                'Memorized':"true",
            } ],
        'TriggerLevel':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Trigger voltage level.",
                'Memorized':"true",
                'unit':"V",
            } ],
        'TriggerDelay':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Delay after detected trigger to acquisition start.",
                'Memorized':"true",
                'unit':"s"
            } ],
        'TriggerWait':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"True if the scope is waiting for a trigger signal",
            } ],
        'RecordLength':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Number of samples in the waveform.",
                'Memorized':"true",
            } ],
        'SampleRate':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Samples per second. Values will be snapped to the next higher factor in 125e6/n (n=1, 8, 64, 1024, 8192, 16384). That is 125, 15.6, 1.95, 0.122, 0.0152, or 0.00762 MSps",
                'Memorized':"true",
                'unit': "S/s"
            } ],

        'TimeVector':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 16000],
            {
                'unit':"s",
            } ],
        'Waveform1':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 16000],
            {
                'unit':"V",
            } ],
        'Waveform2':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 16000],
            {
                'unit':"V",
            } ],
        'MeasurementString1':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Line to evaluate to produce measurement",
                'Memorized':"true",
            } ],
        'MeasurementString2':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Line to evaluate to produce measurement",
                'Memorized':"true",
            } ],
        'MeasurementString3':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Line to evaluate to produce measurement",
                'Memorized':"true",
            } ],
        'MeasurementString4':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description':"Line to evaluate to produce measurement",
                'Memorized':"true",
            } ],
        'MeasurementData1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Result of measurement",
            } ],
        'MeasurementData2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Result of measurement",
            } ],
        'MeasurementData3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Result of measurement",
            } ],
        'MeasurementData4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Result of measurement",
            } ],

        }


#------------------------------------------------------------------
#    RedPitayaEventsDSClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In RedPitayaEventsDSClass  constructor"

#==================================================================
#
#    RedPitayaEventsDS class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(RedPitayaEventsDSClass, RedPitayaEventsDS, 'RedPitayaEventsDS')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed, e:
        print '-------> Received a DevFailed exception:', e
    except Exception, e:
        print '-------> An unforeseen exception occured....', e
